{
	"name": "wizard",
	"desc": "A fully-featured WebAssembly engine designed for teaching and research.",
	"install-command": "mkdir wizard && cd wizard && git clone --depth 1 https://github.com/titzer/virgil.git && cd virgil && export PATH=$PATH:`pwd`/bin && make && cd .. && git clone --depth 1 https://github.com/titzer/wizard-engine.git && cd wizard-engine && make -j && cp bin/wizeng.x86-64-linux bin/wizeng || cp bin/wizeng.x86-linux bin/wizeng || cp bin/wizeng.x86-darwin bin/wizeng || for f in bin/wizeng*; do case \"$f\" in bin/wizeng.jvm*);; *) cp \"$f\" bin/wizeng && break;; esac; done",
	"install-dir": "wizard",
	"version-command": "wizard/wizard-engine/bin/wizeng --version --help",
	"update-command": "cd wizard/virgil && git pull && export PATH=$PATH:`pwd`/bin && make clean && make && cd ../wizard-engine && git pull && make clean && ls -hal && make -j && cp bin/wizeng.x86-64-linux bin/wizeng || cp bin/wizeng.x86-linux bin/wizeng || cp bin/wizeng.x86-darwin bin/wizeng || for f in bin/wizeng*; do case \"$f\" in bin/wizeng.jvm*);; *) cp \"$f\" bin/wizeng && break;; esac; done",
	"command": "wizard/wizard-engine/bin/wizeng --metrics -ext:all --dir={mount_dir} {payload} {args}",
	"subruntimes": [
        {
            "name": "wizard-int",
            "command": "wizard/wizard-engine/bin/wizeng --metrics -ext:all --dir={mount_dir} -mode=int {payload} {args}",
            "desc": "Wizard Engine with fast interpreter only.",
			"stats-parser": {
				"pregen_time_microsec": "pregen:time_us\\s*:\\s*(?P<pregen_time_microsec>[0-9]+)\\s*μs",
				"pregen_bytes": "pregen:bytes\\s*:\\s*(?P<pregen_bytes>[0-9]+)\\s*bytes",
				"load_time_microsec": "load:time_us\\s*:\\s*(?P<load_time_microsec>[0-9]+)\\s*μs",
				"load_bytes": "load:bytes\\s*:\\s*(?P<load_bytes>[0-9]+)\\s*bytes",
				"load_time_per_byte": "load:time_per_byte\\s*:\\s*(?P<load_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"validate_time_microsec": "validate:time_us\\s*:\\s*(?P<validate_time_microsec>[0-9]+)\\s*μs",
				"validate_bytes": "validate:bytes\\s*:\\s*(?P<validate_bytes>[0-9]+)\\s*bytes",
				"validate_time_per_byte": "validate:time_per_byte\\s*:\\s*(?P<validate_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"spc_in_bytes": "spc:in_bytes\\s*:\\s*(?P<spc_in_bytes>[0-9]+)\\s*bytes",
				"spc_code_bytes": "spc:code_bytes\\s*:\\s*(?P<spc_code_bytes>[0-9]+)\\s*bytes",
				"spc_data_bytes": "spc:data_bytes\\s*:\\s*(?P<spc_data_bytes>[0-9]+)\\s*bytes",
				"spc_time_microsec": "spc:time_us\\s*:\\s*(?P<spc_time_microsec>[0-9]+)\\s*μs",
				"spc_functions": "spc:functions\\s*:\\s*(?P<spc_functions>[0-9]+)\\s*functions",
				"spc_time_per_byte": "spc:time_per_byte\\s*:\\s*(?P<spc_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"start_time_microsec": "start:time_us\\s*:\\s*(?P<start_time_microsec>[0-9]+)\\s*μs",
				"main_time_microsec": "main:time_us\\s*:\\s*(?P<main_time_microsec>[0-9]+)\\s*μs",
				"main_time_cycles": "main:time_cycles\\s*:\\s*(?P<main_time_cycles>[0-9]+)\\s*cycles",
				"probes_fired": "probes:fired\\s*:\\s*(?P<probes_fired>[0-9]+)\\s*count"
			}
        },
        {
            "name": "wizard-dyn",
            "command": "wizard/wizard-engine/bin/wizeng --metrics -ext:all --dir={mount_dir} -mode=dyn {payload} {args}",
            "desc": "Wizard Engine with fast interpreter first, compile hot functions with SPC.",
			"stats-parser": {
				"pregen_time_microsec": "pregen:time_us\\s*:\\s*(?P<pregen_time_microsec>[0-9]+)\\s*μs",
				"pregen_bytes": "pregen:bytes\\s*:\\s*(?P<pregen_bytes>[0-9]+)\\s*bytes",
				"load_time_microsec": "load:time_us\\s*:\\s*(?P<load_time_microsec>[0-9]+)\\s*μs",
				"load_bytes": "load:bytes\\s*:\\s*(?P<load_bytes>[0-9]+)\\s*bytes",
				"load_time_per_byte": "load:time_per_byte\\s*:\\s*(?P<load_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"validate_time_microsec": "validate:time_us\\s*:\\s*(?P<validate_time_microsec>[0-9]+)\\s*μs",
				"validate_bytes": "validate:bytes\\s*:\\s*(?P<validate_bytes>[0-9]+)\\s*bytes",
				"validate_time_per_byte": "validate:time_per_byte\\s*:\\s*(?P<validate_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"spc_in_bytes": "spc:in_bytes\\s*:\\s*(?P<spc_in_bytes>[0-9]+)\\s*bytes",
				"spc_code_bytes": "spc:code_bytes\\s*:\\s*(?P<spc_code_bytes>[0-9]+)\\s*bytes",
				"spc_data_bytes": "spc:data_bytes\\s*:\\s*(?P<spc_data_bytes>[0-9]+)\\s*bytes",
				"spc_time_microsec": "spc:time_us\\s*:\\s*(?P<spc_time_microsec>[0-9]+)\\s*μs",
				"spc_functions": "spc:functions\\s*:\\s*(?P<spc_functions>[0-9]+)\\s*functions",
				"spc_time_per_byte": "spc:time_per_byte\\s*:\\s*(?P<spc_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"start_time_microsec": "start:time_us\\s*:\\s*(?P<start_time_microsec>[0-9]+)\\s*μs",
				"main_time_microsec": "main:time_us\\s*:\\s*(?P<main_time_microsec>[0-9]+)\\s*μs",
				"main_time_cycles": "main:time_cycles\\s*:\\s*(?P<main_time_cycles>[0-9]+)\\s*cycles",
				"probes_fired": "probes:fired\\s*:\\s*(?P<probes_fired>[0-9]+)\\s*count"
			}
        },
        {
            "name": "wizard-lazy",
            "command": "wizard/wizard-engine/bin/wizeng --metrics -ext:all --dir={mount_dir} -mode=lazy {payload} {args}",
            "desc": "Wizard Engine with lazy compilation of functions with SPC on first execution.",
			"stats-parser": {
				"pregen_time_microsec": "pregen:time_us\\s*:\\s*(?P<pregen_time_microsec>[0-9]+)\\s*μs",
				"pregen_bytes": "pregen:bytes\\s*:\\s*(?P<pregen_bytes>[0-9]+)\\s*bytes",
				"load_time_microsec": "load:time_us\\s*:\\s*(?P<load_time_microsec>[0-9]+)\\s*μs",
				"load_bytes": "load:bytes\\s*:\\s*(?P<load_bytes>[0-9]+)\\s*bytes",
				"load_time_per_byte": "load:time_per_byte\\s*:\\s*(?P<load_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"validate_time_microsec": "validate:time_us\\s*:\\s*(?P<validate_time_microsec>[0-9]+)\\s*μs",
				"validate_bytes": "validate:bytes\\s*:\\s*(?P<validate_bytes>[0-9]+)\\s*bytes",
				"validate_time_per_byte": "validate:time_per_byte\\s*:\\s*(?P<validate_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"spc_in_bytes": "spc:in_bytes\\s*:\\s*(?P<spc_in_bytes>[0-9]+)\\s*bytes",
				"spc_code_bytes": "spc:code_bytes\\s*:\\s*(?P<spc_code_bytes>[0-9]+)\\s*bytes",
				"spc_data_bytes": "spc:data_bytes\\s*:\\s*(?P<spc_data_bytes>[0-9]+)\\s*bytes",
				"spc_time_microsec": "spc:time_us\\s*:\\s*(?P<spc_time_microsec>[0-9]+)\\s*μs",
				"spc_functions": "spc:functions\\s*:\\s*(?P<spc_functions>[0-9]+)\\s*functions",
				"spc_time_per_byte": "spc:time_per_byte\\s*:\\s*(?P<spc_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"start_time_microsec": "start:time_us\\s*:\\s*(?P<start_time_microsec>[0-9]+)\\s*μs",
				"main_time_microsec": "main:time_us\\s*:\\s*(?P<main_time_microsec>[0-9]+)\\s*μs",
				"main_time_cycles": "main:time_cycles\\s*:\\s*(?P<main_time_cycles>[0-9]+)\\s*cycles",
				"probes_fired": "probes:fired\\s*:\\s*(?P<probes_fired>[0-9]+)\\s*count"
			}
        },
        {
            "name": "wizard-jit",
            "command": "wizard/wizard-engine/bin/wizeng --metrics -ext:all --dir={mount_dir} -mode=jit {payload} {args}",
            "desc": "Wizard Engine with pre-compilation of modules with SPC, fallback to interpreter.",
			"stats-parser": {
				"pregen_time_microsec": "pregen:time_us\\s*:\\s*(?P<pregen_time_microsec>[0-9]+)\\s*μs",
				"pregen_bytes": "pregen:bytes\\s*:\\s*(?P<pregen_bytes>[0-9]+)\\s*bytes",
				"load_time_microsec": "load:time_us\\s*:\\s*(?P<load_time_microsec>[0-9]+)\\s*μs",
				"load_bytes": "load:bytes\\s*:\\s*(?P<load_bytes>[0-9]+)\\s*bytes",
				"load_time_per_byte": "load:time_per_byte\\s*:\\s*(?P<load_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"validate_time_microsec": "validate:time_us\\s*:\\s*(?P<validate_time_microsec>[0-9]+)\\s*μs",
				"validate_bytes": "validate:bytes\\s*:\\s*(?P<validate_bytes>[0-9]+)\\s*bytes",
				"validate_time_per_byte": "validate:time_per_byte\\s*:\\s*(?P<validate_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"spc_in_bytes": "spc:in_bytes\\s*:\\s*(?P<spc_in_bytes>[0-9]+)\\s*bytes",
				"spc_code_bytes": "spc:code_bytes\\s*:\\s*(?P<spc_code_bytes>[0-9]+)\\s*bytes",
				"spc_data_bytes": "spc:data_bytes\\s*:\\s*(?P<spc_data_bytes>[0-9]+)\\s*bytes",
				"spc_time_microsec": "spc:time_us\\s*:\\s*(?P<spc_time_microsec>[0-9]+)\\s*μs",
				"spc_functions": "spc:functions\\s*:\\s*(?P<spc_functions>[0-9]+)\\s*functions",
				"spc_time_per_byte": "spc:time_per_byte\\s*:\\s*(?P<spc_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"start_time_microsec": "start:time_us\\s*:\\s*(?P<start_time_microsec>[0-9]+)\\s*μs",
				"main_time_microsec": "main:time_us\\s*:\\s*(?P<main_time_microsec>[0-9]+)\\s*μs",
				"main_time_cycles": "main:time_cycles\\s*:\\s*(?P<main_time_cycles>[0-9]+)\\s*cycles",
				"probes_fired": "probes:fired\\s*:\\s*(?P<probes_fired>[0-9]+)\\s*count"
			}
        },
        {
            "name": "wizard-spc",
            "command": "wizard/wizard-engine/bin/wizeng --metrics -ext:all --dir={mount_dir} -mode=spc {payload} {args}",
            "desc": "Wizard Engine with pre-compilation of modules with SPC, no fallback.",
			"stats-parser": {
				"pregen_time_microsec": "pregen:time_us\\s*:\\s*(?P<pregen_time_microsec>[0-9]+)\\s*μs",
				"pregen_bytes": "pregen:bytes\\s*:\\s*(?P<pregen_bytes>[0-9]+)\\s*bytes",
				"load_time_microsec": "load:time_us\\s*:\\s*(?P<load_time_microsec>[0-9]+)\\s*μs",
				"load_bytes": "load:bytes\\s*:\\s*(?P<load_bytes>[0-9]+)\\s*bytes",
				"load_time_per_byte": "load:time_per_byte\\s*:\\s*(?P<load_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"validate_time_microsec": "validate:time_us\\s*:\\s*(?P<validate_time_microsec>[0-9]+)\\s*μs",
				"validate_bytes": "validate:bytes\\s*:\\s*(?P<validate_bytes>[0-9]+)\\s*bytes",
				"validate_time_per_byte": "validate:time_per_byte\\s*:\\s*(?P<validate_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"spc_in_bytes": "spc:in_bytes\\s*:\\s*(?P<spc_in_bytes>[0-9]+)\\s*bytes",
				"spc_code_bytes": "spc:code_bytes\\s*:\\s*(?P<spc_code_bytes>[0-9]+)\\s*bytes",
				"spc_data_bytes": "spc:data_bytes\\s*:\\s*(?P<spc_data_bytes>[0-9]+)\\s*bytes",
				"spc_time_microsec": "spc:time_us\\s*:\\s*(?P<spc_time_microsec>[0-9]+)\\s*μs",
				"spc_functions": "spc:functions\\s*:\\s*(?P<spc_functions>[0-9]+)\\s*functions",
				"spc_time_per_byte": "spc:time_per_byte\\s*:\\s*(?P<spc_time_per_byte>[0-9.]+)\\s*μs/bytes",
				"start_time_microsec": "start:time_us\\s*:\\s*(?P<start_time_microsec>[0-9]+)\\s*μs",
				"main_time_microsec": "main:time_us\\s*:\\s*(?P<main_time_microsec>[0-9]+)\\s*μs",
				"main_time_cycles": "main:time_cycles\\s*:\\s*(?P<main_time_cycles>[0-9]+)\\s*cycles",
				"probes_fired": "probes:fired\\s*:\\s*(?P<probes_fired>[0-9]+)\\s*count"
			}
        }
    ],
	"stats-parser": {
        "pregen_time_microsec": "pregen:time_us\\s*:\\s*(?P<pregen_time_microsec>[0-9]+)\\s*μs",
        "pregen_bytes": "pregen:bytes\\s*:\\s*(?P<pregen_bytes>[0-9]+)\\s*bytes",
        "load_time_microsec": "load:time_us\\s*:\\s*(?P<load_time_microsec>[0-9]+)\\s*μs",
        "load_bytes": "load:bytes\\s*:\\s*(?P<load_bytes>[0-9]+)\\s*bytes",
        "load_time_per_byte": "load:time_per_byte\\s*:\\s*(?P<load_time_per_byte>[0-9.]+)\\s*μs/bytes",
        "validate_time_microsec": "validate:time_us\\s*:\\s*(?P<validate_time_microsec>[0-9]+)\\s*μs",
        "validate_bytes": "validate:bytes\\s*:\\s*(?P<validate_bytes>[0-9]+)\\s*bytes",
        "validate_time_per_byte": "validate:time_per_byte\\s*:\\s*(?P<validate_time_per_byte>[0-9.]+)\\s*μs/bytes",
        "spc_in_bytes": "spc:in_bytes\\s*:\\s*(?P<spc_in_bytes>[0-9]+)\\s*bytes",
        "spc_code_bytes": "spc:code_bytes\\s*:\\s*(?P<spc_code_bytes>[0-9]+)\\s*bytes",
        "spc_data_bytes": "spc:data_bytes\\s*:\\s*(?P<spc_data_bytes>[0-9]+)\\s*bytes",
        "spc_time_microsec": "spc:time_us\\s*:\\s*(?P<spc_time_microsec>[0-9]+)\\s*μs",
        "spc_functions": "spc:functions\\s*:\\s*(?P<spc_functions>[0-9]+)\\s*functions",
        "spc_time_per_byte": "spc:time_per_byte\\s*:\\s*(?P<spc_time_per_byte>[0-9.]+)\\s*μs/bytes",
        "start_time_microsec": "start:time_us\\s*:\\s*(?P<start_time_microsec>[0-9]+)\\s*μs",
        "main_time_microsec": "main:time_us\\s*:\\s*(?P<main_time_microsec>[0-9]+)\\s*μs",
        "main_time_cycles": "main:time_cycles\\s*:\\s*(?P<main_time_cycles>[0-9]+)\\s*cycles",
        "probes_fired": "probes:fired\\s*:\\s*(?P<probes_fired>[0-9]+)\\s*count"
    }
}